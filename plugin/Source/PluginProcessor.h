/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include <fftw3.h>
#include "juce_FileOutputStream.h"



using namespace std;

//==============================================================================
/**
*/
class StageDirectorAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    StageDirectorAudioProcessor();
    ~StageDirectorAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    int lastUIWidth_, lastUIHeight_;
    
    enum Params
    {
        kMasterBypass = 0,
        kFFTSize,
        kHopSize,
        kWindowType,
        kCentroid,
        kLevel,
        kNumParams
    };
    
    enum Window
    {
        kRect = 1,
        kBartlett,
        kHann,
        kHamming
    };
    
    //These are the Parameters are used in calculations in the frequency domain, as selected by the user. May differ from actual values used.
    int fftSelectedSize_;
    int hopSelectedSize_;
    int windowType_;
    int samplerate_;
    
    //Variables of extracted features
    float centroid_;
    float level_;
    
    bool NeedsUIUpdate(){return UIUpdateFlag_;};
    void RequestUIUpdate(){UIUpdateFlag_ = true;};
    void ClearUIUpdateFlag(){UIUpdateFlag_ = false;};
    
    File centFile;
    File levelFile;
    FileInputStream* centInStream;
    FileOutputStream* centOutStream;
    FileInputStream* levelInStream;
    FileOutputStream* levelOutStream;
    
private:
    //Initialisation of FFT and windows.
    void initFFT(int length);
    void deinitFFT();
    void initWindow(int length, int windowType);
    void deinitWindow();
    
    //Update the buffering based on the given hop size;
    void updateHopSize();
    
    bool FFTFlag_; //Flag indictating status of FTT machinery: true = init, false = not init.
    bool UIUpdateFlag_;
    bool BypassFlag_;
    
    //FFT variables and plan
    fftw_complex *timeDomain, *frequencyDomain;
    fftw_plan forwardPlan;
    
    //FFT size, hop size
    int transformSize_;
    int hopSizeActual_;
    
    //Circular buffers to hold input prior to FFT and output post FFT
    AudioSampleBuffer inputBuffer, outputBuffer;
    int inputBufferLength_, outputBufferLength_;
    int inputBufferWritePosition_;
    int outputBufferReadPosition_, outputBufferWritePosition_;
    
    int samplesSinceFFT_;
    
    //Window buffer/function for processing input frames
    double *windowBuffer_;
    int windowBufferLength_;
    
    bool preparedFlag_; //has preparedToPlay been called?
    
    //Spinlock to prevent FFT settings changing during execution
    SpinLock fftSpinLock_;
    
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (StageDirectorAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
